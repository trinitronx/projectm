#!/bin/bash -x
# debian/repack

# Part of the Debian package 'projectm-*'.

# Copyright © 2020 James Cuzella <james.cuzella@lyraphase.com>
# This is free software; see the end of this file for license terms.

# debian/repack: Wrapper for uupdate
# 
#   - Runs pandoc --extract-media & removes
#   - Removes Apple Screenshot utility ICC Profile in EXIF data
#   - Repacks free alternative ICC profile: AppleRGB.icc from icc-profiles-free

# Based on:
# debian/repack
#
# Copyright © 2013–2014 Ben Finney <ben+debian@benfinney.id.au>
# This is free software; see the end of this file for license terms.

# Convert the pristine upstream source to the Debian upstream source.
#
# This program is designed for use with the ‘uscan(1)’ tool, as the
# “action” parameter for the ‘debian/watch’ configuration file.

set -o errtrace
set -o pipefail
set -o nounset

PROGNAME="$(basename "$0")"
REPACK_VERBOSE=0
TRY_HARDER=0

program_dir="$(dirname "$(realpath --strip "$0")")"

function usage() {
    local progname=$(basename $0)
    cat << EOF
Usage: ${progname} --upstream-version VERSION [-v]

Repacks upstream source code tarball to follow Debian Free Software Guidelines

	uscan feeds this script the upstream version of the latest upstream source code
	The --upstream-version flag should match the *.orig.tar.xz filename downloaded

    If the --upstream-version passed does not match, this script searches for
	the latest downloaded tarball matching package name, upstream-version,
	a simplified version string striped of trailing Debian or Ubuntu versions
	such as: '+dfsg.1', '~ubuntu.*' etc..

	The upstream tarball must also match:  *.tar.(xz|gz|bz2)

	This script runs the debian/rules 'repack_source_docs_media' target, to
	generate HTML docs, and download images to embed within the source package
    Finally, it strips non-free ICC color profiles from all images, as per DFSG.


    Note: This uscan custom script only supports uscan v4 CLI API
          see: man uscan

    -h, --help         Help. Display this usage message and exit.

    -v                 Verbose output.

    --upstream-version VERSION
                       The version used to find the pristine upstream source tar

                       Must match pattern that uscan uses:

                       \${package_name}-\${upstream_version}.tar.xz

    --try-harder       Try harder to find the upstream tarball
                       Uses a regex heuristic to find the latest timestamped
                       file matching this pattern:

                        \${package_name}-\${upstream_normalized_version_base}.*\.tar\.(xz|gz|bz2)

                       The normalized version is the same as the upstream, just
					   striped of any downstream version string patterns.

EOF
}

ARGUMENT_LIST=(
    "upstream-version:"
    "try-harder"
	"help"
)

# read arguments
opts=$(getopt \
    --longoptions "$(printf "%s," "${ARGUMENT_LIST[@]}")" \
    --name "$PROGNAME" \
    --options "hv" \
    -- "$@"
)

eval set -- $opts

# parse options (if any exist)
while true; do
	echo "$1"
    case "$1" in
        -h)  usage
			shift
            exit 0
            ;;
        --help) shift
			usage
            exit 0
            ;;
        --verbose) shift
			REPACK_VERBOSE=1
            exit 0
            ;;
        --try-harder) shift
			TRY_HARDER=1
            exit 0
            ;;
        --upstream-version) shift
			upstream_version="$1"
			;;
        --) shift
			break
			;;
        *)  usage
			shift
            exit 1
            ;;
    esac
  shift
done

if [ -z "$upstream_version" ]; then
	echo "ERROR: upstream-version must bet set!" >&2
	usage
	exit 1
fi

set -o errexit

source "${program_dir}"/source_package_build.bash

symlink_filename="../${upstream_tarball_basename}.tar.xz"
target_filename="${release_dfsg_tarball_basename}.tar.xz"
target_working_file="${working_dir}/${target_filename}"
target_file="$(dirname "${downloaded_file}")/${target_filename}"

repack_dir="${working_dir}/${dfsg_dirname}"

printf "Unpacking pristine upstream source ‘${downloaded_file}’:\n"

extract_tarball_to_working_dir "${downloaded_file}"

upstream_source_dirname=$(ls -1 "${working_dir}")
upstream_source_dir="${working_dir}/${upstream_source_dirname}"

printf "Repackaging upstream source from ‘${upstream_source_dir}’ to ‘${repack_dir}’:\n"

mv "${upstream_source_dir}" "${repack_dir}"

printf "Removing non-DFSG-free files:\n"

nonfree_fileglobs=(
        )

for fileglob in "${nonfree_fileglobs[@]}" ; do
    echo rm -v "${repack_dir}"/$fileglob
done

printf "Generating HTML docs from Markdown files:\n"

${program_dir}/rules -C ${repack_dir} repack_source_docs_media

nonfree_image_dirs=(
        docs_media/
		web/
		presets/presets_tryptonaut/
		src/projectM-qt/images/
		src/projectM-iTunes/images/
		src/projectM-iTunes/projectM\ screenshots/
        )

replacement_icc_profile='/usr/share/color/icc/colord/sRGB.icc'

printf "Removing non-DFSG-free ICC image color profiles:\n"

for dir in "${nonfree_image_dirs[@]}" ; do
    find "${repack_dir}/${dir}" -regextype posix-extended \
         -iregex '.*\.(jpg|png|svg)' \
         -exec sh -c 'identify -verbose "$0" 2>/dev/null | \
                      grep -v "free of known copyright restrictions" | \
                      grep -iq copyright && printf "$0\0"' {} \; | \
      xargs -0 exiftool -overwrite_original "-icc_profile<=${replacement_icc_profile}"
done

printf "Rebuilding DFSG-free upstream source tarball:\n"

archive_working_dirname_to_tarball "${dfsg_dirname}" "${target_working_file}"

printf "Moving completed upstream tarball to ‘${target_file}’:\n"

rm -v "${downloaded_file}"
mv "${target_working_file}" "${target_file}"

printf "Creating symlink ${symlink_filename} -> $(basename ${target_file})\n"
pwd
ln -sf "$(basename ${target_file})" "${symlink_filename}"

printf "Done.\n"


# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# “Software”), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# The Software is provided “as is”, without warranty of any kind,
# express or implied, including but not limited to the warranties of
# merchantability, fitness for a particular purpose and noninfringement.
# In no event shall the authors or copyright holders be liable for any
# claim, damages or other liability, whether in an action of contract,
# tort or otherwise, arising from, out of or in connection with the
# Software or the use or other dealings in the Software.


# Local variables:
# coding: utf-8
# mode: sh
# indent-tabs-mode: nil
# End:
# vim: fileencoding=utf-8 filetype=bash :
